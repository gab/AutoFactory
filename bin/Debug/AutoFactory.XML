<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoFactory</name>
    </assembly>
    <members>
        <member name="T:AutoFactory.AutoFactoryAutofac`1">
            <summary>
            Generic Factory using Autofac.
            </summary>
            <typeparam name="TBase">The base type of the parts.</typeparam>
            <remarks>
            No limitations, this is the recommended container.
            </remarks>
        </member>
        <member name="T:AutoFactory.AutoFactoryBase`1">
            <summary>
            Base class for the AutoFactory implementations
            </summary>
            <typeparam name="TBase">The base type of the parts.</typeparam>
        </member>
        <member name="T:AutoFactory.IAutoFactory`1">
            <summary>
            Generic Factory generic interface.
            </summary>
        </member>
        <member name="T:AutoFactory.IAutoFactory">
            <summary>
            Generic Factory non-generic interface.
            </summary>
        </member>
        <member name="M:AutoFactory.IAutoFactory.SeekPart(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks a part that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.IAutoFactory.SeekPartFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks a part that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.IAutoFactory.SeekParts(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks parts that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.IAutoFactory.SeekPartsFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks parts that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.IAutoFactory`1.SeekPart(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks a part that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.IAutoFactory`1.SeekPartFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks a part that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.IAutoFactory`1.SeekParts(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks parts that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.IAutoFactory`1.SeekPartsFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks parts that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.SeekPart(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks a part that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
            <returns>`0.</returns>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.SeekPartFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks a part that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
            <returns>`0.</returns>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.SeekParts(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks parts that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
            <returns>IEnumerable{`0}.</returns>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.SeekPartsFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks parts that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
            <returns>IEnumerable{`0}.</returns>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.ComposeParts(System.Reflection.Assembly,System.Object[],System.Type[])">
            <summary>
            Composes the parts.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="dependencies">The dependencies.</param>
            <param name="dependencyTypes">The dependency types.</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.AutoFactory#IAutoFactory#SeekPart(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks a part that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.AutoFactory#IAutoFactory#SeekPartFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks a part that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.AutoFactory#IAutoFactory#SeekParts(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks parts that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:AutoFactory.AutoFactoryBase`1.AutoFactory#IAutoFactory#SeekPartsFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks parts that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
        </member>
        <member name="F:AutoFactory.AutoFactoryAutofac`1.MetadataKey">
            <summary>
            The the metadata key to store the part type
            </summary>
        </member>
        <member name="F:AutoFactory.AutoFactoryAutofac`1._container">
            <summary>
            The Autofac parts container
            </summary>
        </member>
        <member name="F:AutoFactory.AutoFactoryAutofac`1._parts">
            <summary>
            The lazily instantiated parts
            </summary>
        </member>
        <member name="M:AutoFactory.AutoFactoryAutofac`1.TryResolve(Autofac.Features.Metadata.Meta{System.Lazy{`0}})">
            <summary>
            Try to resolve the part and return it
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryAutofac`1.ComposeParts(System.Reflection.Assembly,System.Object[],System.Type[])">
            <summary>
            Compose parts using Autofac container.
            </summary>
            <param name="assembly">The assembly with the parts (when codeBase is null)</param>
            <param name="dependencies">The dependency values to inject to the part constructor</param>
            <param name="dependencyTypes">The dependency impoty types to inject to the part constructor</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryAutofac`1.SeekParts(System.Func{System.Type,System.Boolean})">
            <summary>
            Seeks a part that satisfy a predicate on the concrete type.
            </summary>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
            <returns>IEnumerable{`0}.</returns>
        </member>
        <member name="M:AutoFactory.AutoFactoryAutofac`1.SeekPartsFromAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Seeks a part that satisfy a condition on a specified attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type on the concrete class.
            Concrete classes must have the attribute.</typeparam>
            <param name="predicate">Predicate function to identify the concrete type needed</param>
            <returns>IEnumerable{`0}.</returns>
        </member>
        <member name="T:AutoFactory.Factory">
            <summary>
            Generic factory creator.
            Creates Generic Factories for types deriving/implementing from a base class/interface.
            </summary>
        </member>
        <member name="M:AutoFactory.Factory.Create``1(System.Object[],System.Type[])">
            <summary>
            Creates a new factory for the type <typeparamref name="TBase"/>, 
            passing the dependency values and types (<paramref name="constructorParams"/> and <paramref name="constructorParamTypes"/>) to be injected
            in the constructor of the parts.
            </summary>
            <typeparam name="TBase">The base class/interface from which the parts derives</typeparam>
            <param name="constructorParams">The dependency values (constructor parameters) to inject when creating a part.</param>
            <param name="constructorParamTypes">The dependency types (constructor parameter types). Must be of the same size as <paramref name="constructorParams"/></param>
        </member>
        <member name="M:AutoFactory.Factory.Create``1(System.Object[])">
            <summary>
            Creates a new factory for the type <typeparamref name="TBase"/>, 
            passing the dependency values (<paramref name="constructorParams"/> and using the concrete types to be injected as the contructor parameters.
            </summary>
            <typeparam name="TBase">The base class/interface from which the parts derives</typeparam>
            <param name="constructorParams">The dependency values (constructor parameters) to inject when creating a part.</param>
        </member>
        <member name="M:AutoFactory.Factory.Create``1(System.Reflection.Assembly,System.Object[],System.Type[])">
            <summary>
            Creates a new factory for the type <typeparamref name="TBase"/> using the given container type <paramref name="containerType"/>, 
            passing the dependency values and types (<paramref name="constructorParams"/> and <paramref name="constructorParamTypes"/>) to be injected
            in the constructor of the parts.
            </summary>
            <typeparam name="TBase">The base class/interface from which the parts derives</typeparam>
            <param name="assembly">The assembly containing the parts</param>
            <param name="constructorParams">The dependency values (constructor parameters) to inject when creating a part.</param>
            <param name="constructorParamTypes">The dependency types (constructor parameter types). Must be of the same size as <paramref name="constructorParams"/></param>
        </member>
        <member name="M:AutoFactory.Factory.Create(System.Type,System.Reflection.Assembly,System.Object[],System.Type[])">
            <summary>
            Creates a new factory for the base type given, 
            passing the dependency values and types (<paramref name="constructorParams"/> and <paramref name="constructorParamTypes"/>) to be injected
            in the constructor of the parts.
            </summary>
            <param name="baseType">The base class/interface type from which the parts derives</param>
            <param name="assembly">The assembly containing the parts. (If null, it will use the calling assembly)</param>
            <param name="constructorParams">The dependency values (constructor parameters) to inject when creating a part. (If null, it will use the parameterless contructor)</param>
            <param name="constructorParamTypes">The dependency types (constructor parameter types). Must be of the same size as <paramref name="constructorParams"/>. Can be null to use the concrete type of <paramref name="constructorParams"/></param>
        </member>
        <member name="M:AutoFactory.Factory.CreateProc``1(System.Reflection.Assembly,System.Object[],System.Type[])">
            <summary>
            Factory method to create and compose the generic factory
            </summary>
        </member>
        <member name="T:AutoFactory.AutoFactoryException">
            <summary>
            AutoFactory Exception class.
            </summary>
        </member>
        <member name="M:AutoFactory.AutoFactoryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFactory.AutoFactoryException"/> class.
            </summary>
        </member>
        <member name="M:AutoFactory.AutoFactoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFactory.AutoFactoryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:AutoFactory.AutoFactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
    </members>
</doc>
